//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2/11/2020 12:06:38 PM
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

namespace TwitterStreamWebViewer
{

    public partial class TwitterSearchModel : DbContext
    {

        public TwitterSearchModel() :
            base()
        {
            OnCreated();
        }

        public TwitterSearchModel(DbContextOptions<TwitterSearchModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseSqlServer(GetConnectionString("TwitterSearchModelConnectionString"));
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<TweetRecord> TweetRecords
        {
            get;
            set;
        }

        public virtual DbSet<TwitterUser> TwitterUsers
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.TweetRecordMapping(modelBuilder);
            this.CustomizeTweetRecordMapping(modelBuilder);

            this.TwitterUserMapping(modelBuilder);
            this.CustomizeTwitterUserMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }

        #region TweetRecord Mapping

        private void TweetRecordMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TweetRecord>().ToTable(@"TweetRecords");
            modelBuilder.Entity<TweetRecord>().Property<long>(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<TweetRecord>().Property<string>(x => x.TweetID).HasColumnName(@"TweetID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TweetRecord>().Property<string>(x => x.TweetJson).HasColumnName(@"TweetJson").HasColumnType(@"nvarchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TweetRecord>().Property<string>(x => x.FacebookID).HasColumnName(@"FacebookID").ValueGeneratedNever();
            modelBuilder.Entity<TweetRecord>().HasKey(@"ID");
        }

        partial void CustomizeTweetRecordMapping(ModelBuilder modelBuilder);

        #endregion

        #region TwitterUser Mapping

        private void TwitterUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<TwitterUser>().ToTable(@"TwitterUsers");
            modelBuilder.Entity<TwitterUser>().Property<long>(x => x.ID).HasColumnName(@"ID").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<TwitterUser>().Property<string>(x => x.TwitterUserID).HasColumnName(@"TwitterUserID").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TwitterUser>().Property<string>(x => x.TwitterUserJson).HasColumnName(@"TwitterUserJson").HasColumnType(@"nvarchar(max)").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<TwitterUser>().HasKey(@"ID");
        }

        partial void CustomizeTwitterUserMapping(ModelBuilder modelBuilder);

        #endregion

        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}
